select id, event_type, is_pregnant,E.*  from core."viewJsonDataConversionOfEvent" E
where entity_type ='mother' and
base_entity_id = '083a7163-efc9-41bd-99cc-db5fc15971ec' 



select distinct(event_type) from core."viewJsonDataConversionOfEvent"
where entity_type ='mother' 

select distinct(base_entity_id) 
from core."viewJsonDataConversionOfEvent"
where entity_type ='mother' 

---- july 24------


select id, event_type, is_pregnant,E.*  from core."viewJsonDataConversionOfEvent" E
where entity_type ='mother' and
base_entity_id = '106518e7-5a33-4ed1-b784-e0122d3962b0' 

select id,E.*  from core.event E
where json->> 'entityType' ='mother' and
json->> 'eventType' like '%Counselling%' and
json->> 'baseEntityId' = '106518e7-5a33-4ed1-b784-e0122d3962b0' 

select E.*  from core."viewJsonDataConversionOfEvent" E
where entity_type ='mother' and
event_type = 'Woman Member Follow Up'

select E.*  from core."viewJsonDataConversionOfEvent" E
where event_type = 'Pregnant Woman Counselling'

select distinct(event_type) from core."viewJsonDataConversionOfEvent"
where entity_type = 'mother' 

select distinct(base_entity_id) 
from core."viewJsonDataConversionOfEvent"
where entity_type ='mother' 

select E.*  from core."viewJsonDataConversionOfClient" E
where first_name like '%mina%'
order by id desc



---- july 25 ----

select E.*  from core."viewJsonDataConversionOfEvent" E
where entity_type ='child' 
and event_type like '%Registration%'

and base_entity_id = '106518e7-5a33-4ed1-b784-e0122d3962b0' 

select id,E.*  from core.event E
where json->> 'entityType' ='child' and
json->> 'eventType' like '%Registration%'


---- july 30 -----

select * from core.child_growth 
where base_entity_id = '1884083d-d2d9-41be-bb69-666083c1b7f0'


----- july 31 ----

CREATE OR REPLACE FUNCTION core.refresh_materialized_views() RETURNS VARCHAR AS $LABEL$
DECLARE 
v_result integer;
BEGIN

refresh materialized view core."viewJsonDataConversionOfClient" with data;

refresh materialized view core."viewJsonDataConversionOfEvent" with data;

refresh materialized view core."viewJsonDataConversionOfWeight" with data;


RETURN ('Success');

END;
$LABEL$ LANGUAGE plpgsql
SECURITY DEFINER;



select * from core.refresh_materialized_views();

---- august 1 ----
CREATE OR REPLACE FUNCTION core.refresh_materialized_views() RETURNS INT AS $$
DECLARE 
v_result integer;
successCount INT;
BEGIN
RAISE NOTICE 'Refreshing viewJsonDataConversionOfClient';
refresh materialized view core."viewJsonDataConversionOfClient" with data;
RAISE NOTICE 'Refreshing viewJsonDataConversionOfEvent';
refresh materialized view core."viewJsonDataConversionOfEvent" with data;
RAISE NOTICE 'Refreshing viewJsonDataConversionOfWeight';
refresh materialized view core."viewJsonDataConversionOfWeight" with data;
RAISE NOTICE 'Refreshing childView';
refresh materialized view core."childView" with data;
RAISE NOTICE 'Refreshing wonamView';
refresh materialized view core."wonamView" with data;

successCount= 5;
RETURN successCount;

END;
$$ LANGUAGE plpgsql
SECURITY DEFINER;



select * from core.refresh_materialized_views();

---- august 27, 2018 ----
SELECT DISTINCT(view_name) 
FROM core."duplicate_matching_criteria_definition"
